NAME: Stewart Dulaney
EMAIL: sdulaney@ucla.edu
ID: 904-064-791

Included files:


QUESTION 2.3.1 - Cycles in the basic list implementation:
- Where do you believe most of the cycles are spent in the 1 and 2-thread list tests?
In the 1 and 2-thread list tests, it seems reasonable to assume that most of the cycles are spent actually performing the list operations in the critical section.
- Why do you believe these to be the most expensive parts of the code?
If there are only 1 or 2 threads, there is less lock contention and so it seems reasonable to assume that less execution time (compared with high-thread scenarios) is being spent getting the locks. On the other hand, list operations on a sorted linked list are O(n) in the size of the list and that processing time would be the most expensive if synchronization overhead is low.
- Where do you believe most of the time/cycles are being spent in the high-thread spin-lock tests?
In high-thread spin-lock tests, most of the cycles would be spent spinning and checking if the lock is available if lock contention is high enough.
- Where do you believe most of the time/cycles are being spent in the high-thread mutex tests?
In high-thread mutex tests, most of the time/cycles are spent on either context switches or list operations. While context switches are very expensive, more cycles could be spent on list operations if the list was long enough (linear time operations). On the other hand, if the list is short, more cycles would be spent on switching from user mode to kernel mode and back for a context switch.

