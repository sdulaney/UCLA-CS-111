/*
  NAME: Stewart Dulaney
  EMAIL: sdulaney@ucla.edu
  ID: 904-064-791
 */

#include <stdlib.h>

#include <unistd.h>

#include <getopt.h>

int main(int argc, char ** argv) {

  // Process all arguments
  int c;
  int digit_optind = 0;

  while (1) {
    int this_option_optind = optind ? optind : 1;
    int option_index = 0;
    static struct option long_options[] = {
      {
        "add",
        required_argument,
        0,
        0
      },
      {
        "append",
        no_argument,
        0,
        0
      },
      {
        "delete",
        required_argument,
        0,
        0
      },
      {
        "verbose",
        no_argument,
        0,
        0
      },
      {
        "create",
        required_argument,
        0,
        'c'
      },
      {
        "file",
        required_argument,
        0,
        0
      },
      {
        0,
        0,
        0,
        0
      }
    };

    c = getopt_long(argc, argv, "abc:d:012",
      long_options, & option_index);
    if (c == -1)
      break;

    switch (c) {
    case 0:
      printf("option %s", long_options[option_index].name);
      if (optarg)
        printf(" with arg %s", optarg);
      printf("\n");
      break;

    case '0':
    case '1':
    case '2':
      if (digit_optind != 0 && digit_optind != this_option_optind)
        printf("digits occur in two different argv-elements.\n");
      digit_optind = this_option_optind;
      printf("option %c\n", c);
      break;

    case 'a':
      printf("option a\n");
      break;

    case 'b':
      printf("option b\n");
      break;

    case 'c':
      printf("option c with value '%s'\n", optarg);
      break;

    case 'd':
      printf("option d with value '%s'\n", optarg);
      break;

    case '?':
      break;

    default:
      printf("?? getopt returned character code 0%o ??\n", c);
    }
  }

  if (optind < argc) {
    printf("non-option ARGV-elements: ");
    while (optind < argc)
      printf("%s ", argv[optind++]);
    printf("\n");
  }

  exit(EXIT_SUCCESS);
}

// Do any file redirection

// Register the signal handler

// Cause the segfault

// Copy STDIN to STDOUT 
int buf;
while (1) {
  int temp = read(0, & buf, 1);

  // EOF
  if (temp == 0) {
    break;
  }

  write(1, & buf, 1);
}
exit(0);
}